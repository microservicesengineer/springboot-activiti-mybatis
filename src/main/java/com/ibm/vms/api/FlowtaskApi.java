/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.ibm.vms.api;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.ibm.vms.models.CandidateUserVO;
import com.ibm.vms.models.ClaimTaskReqVO;
import com.ibm.vms.models.CompleteTaskReqVO;
import com.ibm.vms.models.DelegateTaskReqVO;
import com.ibm.vms.models.QueryTaskReqVO;
import com.ibm.vms.models.StandardResponse;
import com.ibm.vms.models.WithdrawVO;

import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;

@Api(value = "Flowtask", description = "the Flowtask API")
public interface FlowtaskApi {

    Logger log = LoggerFactory.getLogger(FlowtaskApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "根据taskid添加候选人", nickname = "addCandidateUser", notes = "", response = StandardResponse.class, tags={ "Flowtask", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = StandardResponse.class) })
    @RequestMapping(value = "/flowTask/taskCandidate/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<StandardResponse> _addCandidateUser(@ApiParam(value = "",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody CandidateUserVO body) {
        return addCandidateUser(id, body);
    }

    // Override this method
    default ResponseEntity<StandardResponse> addCandidateUser(String id,CandidateUserVO body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"code\" : 0,  \"data\" : \"{}\",  \"message\" : \"message\"}", StandardResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default FlowtaskApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "认领task", nickname = "claimTaskByID", notes = "", response = StandardResponse.class, tags={ "Flowtask", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "complete user task successfully", response = StandardResponse.class) })
    @RequestMapping(value = "/flowTask/claim",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<StandardResponse> _claimTaskByID(@ApiParam(value = ""  )  @Valid @RequestBody ClaimTaskReqVO body) {
        return claimTaskByID(body);
    }

    // Override this method
    default ResponseEntity<StandardResponse> claimTaskByID(ClaimTaskReqVO body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"code\" : 0,  \"data\" : \"{}\",  \"message\" : \"message\"}", StandardResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default FlowtaskApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "完成task(e.g. 包含assign,group users)", nickname = "completeTask", notes = "", response = StandardResponse.class, tags={ "Flowtask", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "complete user task successfully", response = StandardResponse.class) })
    @RequestMapping(value = "/flowTask/complete",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<StandardResponse> _completeTask(@ApiParam(value = ""  )  @Valid @RequestBody CompleteTaskReqVO body) {
        return completeTask(body);
    }

    // Override this method
    default ResponseEntity<StandardResponse> completeTask(CompleteTaskReqVO body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"code\" : 0,  \"data\" : \"{}\",  \"message\" : \"message\"}", StandardResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default FlowtaskApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "转签task", nickname = "delegateTask", notes = "", response = StandardResponse.class, tags={ "Flowtask", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = StandardResponse.class) })
    @RequestMapping(value = "/flowTask/delegatetasks",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<StandardResponse> _delegateTask(@ApiParam(value = ""  )  @Valid @RequestBody DelegateTaskReqVO body) {
        return delegateTask(body);
    }

    // Override this method
    default ResponseEntity<StandardResponse> delegateTask(DelegateTaskReqVO body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"code\" : 0,  \"data\" : \"{}\",  \"message\" : \"message\"}", StandardResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default FlowtaskApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "根据id删除user task", nickname = "deleteTaskByID", notes = "", response = StandardResponse.class, tags={ "Flowtask", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "delete task successfully", response = StandardResponse.class) })
    @RequestMapping(value = "/flowTask/tasks/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    default ResponseEntity<StandardResponse> _deleteTaskByID(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        return deleteTaskByID(id);
    }

    // Override this method
    default ResponseEntity<StandardResponse> deleteTaskByID(String id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"code\" : 0,  \"data\" : \"{}\",  \"message\" : \"message\"}", StandardResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default FlowtaskApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "根据taskid获取任务中的办理候选人", nickname = "getTaskCandidate", notes = "", response = StandardResponse.class, tags={ "Flowtask", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = StandardResponse.class) })
    @RequestMapping(value = "/flowTask/taskCandidate/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<StandardResponse> _getTaskCandidate(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        return getTaskCandidate(id);
    }

    // Override this method
    default ResponseEntity<StandardResponse> getTaskCandidate(String id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"code\" : 0,  \"data\" : \"{}\",  \"message\" : \"message\"}", StandardResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default FlowtaskApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "根据taskid查看变量", nickname = "getVariablesById", notes = "", response = StandardResponse.class, tags={ "Flowtask", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = StandardResponse.class) })
    @RequestMapping(value = "/flowTask/variables/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<StandardResponse> _getVariablesById(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        return getVariablesById(id);
    }

    // Override this method
    default ResponseEntity<StandardResponse> getVariablesById(String id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"code\" : 0,  \"data\" : \"{}\",  \"message\" : \"message\"}", StandardResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default FlowtaskApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "根据当前taskID获取表单", nickname = "getformbyid", notes = "", response = StandardResponse.class, tags={ "Flowtask", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = StandardResponse.class) })
    @RequestMapping(value = "/flowTask/form/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<StandardResponse> _getformbyid(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        return getformbyid(id);
    }

    // Override this method
    default ResponseEntity<StandardResponse> getformbyid(String id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"code\" : 0,  \"data\" : \"{}\",  \"message\" : \"message\"}", StandardResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default FlowtaskApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "撤回当前task至指定步骤", nickname = "jump", notes = "", response = StandardResponse.class, tags={ "Flowtask", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = StandardResponse.class) })
    @RequestMapping(value = "/flowTask/withdraw/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<StandardResponse> _jump(@ApiParam(value = "",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody WithdrawVO body) {
        return jump(id, body);
    }

    // Override this method
    default ResponseEntity<StandardResponse> jump(String id,WithdrawVO body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"code\" : 0,  \"data\" : \"{}\",  \"message\" : \"message\"}", StandardResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default FlowtaskApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "查询user task", nickname = "queryTask", notes = "", response = StandardResponse.class, tags={ "Flowtask", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "upload bpmn file  successfully", response = StandardResponse.class) })
    @RequestMapping(value = "/flowTask/tasks",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<StandardResponse> _queryTask(@ApiParam(value = ""  )  @Valid @RequestBody QueryTaskReqVO body) {
        return queryTask(body);
    }

    // Override this method
    default ResponseEntity<StandardResponse> queryTask(QueryTaskReqVO body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"code\" : 200,  \"message\" : \"aute minim\",  \"data\" : {    \"name\" : \"alex\"  }}", StandardResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default FlowtaskApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "归还之前认领的task", nickname = "unclaimTaskByID", notes = "", response = StandardResponse.class, tags={ "Flowtask", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "complete user task successfully", response = StandardResponse.class) })
    @RequestMapping(value = "/flowTask/unclaim/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<StandardResponse> _unclaimTaskByID(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        return unclaimTaskByID(id);
    }

    // Override this method
    default ResponseEntity<StandardResponse> unclaimTaskByID(String id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"code\" : 0,  \"data\" : \"{}\",  \"message\" : \"message\"}", StandardResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default FlowtaskApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
